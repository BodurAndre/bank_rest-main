document.addEventListener('DOMContentLoaded', function() {
    initializeAdminRecreateCardButtons();
});

function initializeAdminRecreateCardButtons() {
    const recreateButtons = document.querySelectorAll('.admin-recreate-card-btn');
    recreateButtons.forEach(button => {
        button.addEventListener('click', function() {
            const cardId = this.getAttribute('data-card-id');
            const cardNumber = this.getAttribute('data-card-number');
            const ownerEmail = this.getAttribute('data-owner-email');
            showAdminCardRecreateModal(cardId, cardNumber, ownerEmail);
        });
    });
}

function showAdminCardRecreateModal(cardId, cardNumber, ownerEmail) {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.className = 'modal-overlay show';
    modal.id = 'adminCardRecreateModal';
    
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å—Ç–µ–∫—à–µ–π –∫–∞—Ä—Ç—ã (–ê–¥–º–∏–Ω)</h3>
                <button type="button" class="modal-close" onclick="closeAdminCardRecreateModal()">&times;</button>
            </div>
            <div class="modal-body">
                <p><strong>–ö–∞—Ä—Ç–∞:</strong> ${cardNumber}</p>
                <p><strong>–í–ª–∞–¥–µ–ª–µ—Ü:</strong> ${ownerEmail}</p>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã:</p>
                
                <div class="form-group">
                    <label for="adminNewExpiryDate">–ù–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</label>
                    <select id="adminNewExpiryDate" class="form-control" required>
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è</option>
                        ${generateExpiryDateOptions()}
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="submitAdminCardRecreateRequest('${cardId}', '${ownerEmail}')">
                    üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É
                </button>
                <button type="button" class="btn btn-secondary" onclick="closeAdminCardRecreateModal()">
                    –û—Ç–º–µ–Ω–∞
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    setTimeout(() => { modal.classList.add('show'); }, 10);
}

function closeAdminCardRecreateModal() {
    const modal = document.getElementById('adminCardRecreateModal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
}

function submitAdminCardRecreateRequest(cardId, ownerEmail) {
    const newExpiryDateSelect = document.getElementById('adminNewExpiryDate');
    const newExpiryDate = newExpiryDateSelect.value;

    if (!newExpiryDate) {
        showCustomNotification('‚ùå –û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã', 'error');
        return;
    }

    showCustomConfirm(
        'üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã',
        `–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É —Å –Ω–æ–≤—ã–º —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è ${newExpiryDate}?`,
        '–î–∞, –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å',
        '–û—Ç–º–µ–Ω–∞',
        () => {
            console.log('Admin recreating card:', { cardId, newExpiryDate, ownerEmail });

            // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É
            const createCardData = {
                ownerEmail: ownerEmail,
                expiryDate: newExpiryDate
            };

            fetch('/api/cards', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(createCardData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã');
                }
                return response.json();
            })
            .then(newCard => {
                console.log('New card created by admin:', newCard);
                
                // –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–∞—Ä—Ç—É
                return fetch(`/api/cards/${cardId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
            })
            .then(response => {
                if (!response.ok) {
                    console.warn('Warning: Could not delete old card, but new card was created');
                    // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞
                }
                
                closeAdminCardRecreateModal();
                showCustomNotification('‚úÖ –£—Å–ø–µ—Ö', '–ö–∞—Ä—Ç–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'success');
                
                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            })
            .catch(error => {
                console.error('Error recreating card:', error);
                showCustomNotification('‚ùå –û—à–∏–±–∫–∞', '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã: ' + error.message, 'error');
            });
        }
    );
}

function generateExpiryDateOptions() {
    const now = new Date();
    const currentMonth = now.getMonth() + 1; // getMonth() returns 0-11, so add 1
    const currentYear = now.getFullYear();
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ 2 –≥–æ–¥–∞
    const startYear = currentYear + 2;
    const endYear = startYear + 3; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 4 –≥–æ–¥–∞ –≤–ø–µ—Ä–µ–¥
    
    let options = '';
    
    for (let year = startYear; year <= endYear; year++) {
        const shortYear = year.toString().slice(-2); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ü–∏—Ñ—Ä—ã –≥–æ–¥–∞
        const monthStr = currentMonth.toString().padStart(2, '0'); // –î–æ–±–∞–≤–ª—è–µ–º 0 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const yearsFromNow = year - currentYear;
        options += `<option value="${monthStr}/${shortYear}">${monthStr}/${shortYear} (${yearsFromNow} ${yearsFromNow === 1 ? '–≥–æ–¥' : yearsFromNow < 5 ? '–≥–æ–¥–∞' : '–ª–µ—Ç'})</option>`;
    }
    
    return options;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö)
function showCustomNotification(title, message, type) {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification notification-${type} show`;
    notification.innerHTML = `
        <div class="notification-content">
            <div class="notification-icon">${type === 'success' ? '‚úÖ' : '‚ùå'}</div>
            <div class="notification-text">
                <strong>${title}</strong><br>${message}
            </div>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 5000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö)
function showCustomConfirm(title, message, confirmText, cancelText, onConfirm) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay show';
    modal.id = 'adminConfirmModal';
    
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>${title}</h3>
            </div>
            <div class="modal-body">
                <p>${message}</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="confirmAdminAction()">
                    ${confirmText}
                </button>
                <button type="button" class="btn btn-secondary" onclick="closeAdminConfirmModal()">
                    ${cancelText}
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º callback
    window.adminConfirmCallback = onConfirm;
    
    setTimeout(() => { modal.classList.add('show'); }, 10);
}

function confirmAdminAction() {
    if (window.adminConfirmCallback) {
        window.adminConfirmCallback();
        window.adminConfirmCallback = null;
    }
    closeAdminConfirmModal();
}

function closeAdminConfirmModal() {
    const modal = document.getElementById('adminConfirmModal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
}

