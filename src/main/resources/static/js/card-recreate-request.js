document.addEventListener('DOMContentLoaded', function() {
    initializeRecreateCardButtons();
});

function generateExpiryDateOptions() {
    const now = new Date();
    const currentMonth = now.getMonth() + 1; // getMonth() returns 0-11, so add 1
    const currentYear = now.getFullYear();
    
    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ 2 –≥–æ–¥–∞
    const startYear = currentYear + 2;
    const endYear = startYear + 3; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º 4 –≥–æ–¥–∞ –≤–ø–µ—Ä–µ–¥
    
    let options = '';
    
    for (let year = startYear; year <= endYear; year++) {
        const shortYear = year.toString().slice(-2); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Ü–∏—Ñ—Ä—ã –≥–æ–¥–∞
        const monthStr = currentMonth.toString().padStart(2, '0'); // –î–æ–±–∞–≤–ª—è–µ–º 0 –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        options += `<option value="${monthStr}/${shortYear}">${monthStr}/${shortYear}</option>`;
    }
    
    return options;
}

function initializeRecreateCardButtons() {
    const recreateButtons = document.querySelectorAll('.recreate-card-btn');
    recreateButtons.forEach(button => {
        button.addEventListener('click', function() {
            const cardId = this.getAttribute('data-card-id');
            const cardNumber = this.getAttribute('data-card-number');
            showCardRecreateModal(cardId, cardNumber);
        });
    });
}

function showCardRecreateModal(cardId, cardNumber) {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    const modal = document.createElement('div');
    modal.className = 'modal-overlay show';
    modal.id = 'cardRecreateModal';
    
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã</h3>
                <button type="button" class="modal-close" onclick="closeCardRecreateModal()">&times;</button>
            </div>
            <div class="modal-body">
                <p><strong>–ö–∞—Ä—Ç–∞:</strong> ${cardNumber}</p>
                <p>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã:</p>
                
                <div class="form-group">
                    <label for="newExpiryDate">–ù–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</label>
                    <select id="newExpiryDate" class="form-control" required>
                        <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è</option>
                        ${generateExpiryDateOptions()}
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="submitCardRecreateRequest('${cardId}')">
                    üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å
                </button>
                <button type="button" class="btn btn-secondary" onclick="closeCardRecreateModal()">
                    –û—Ç–º–µ–Ω–∞
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    setTimeout(() => { modal.classList.add('show'); }, 10);
}

function closeCardRecreateModal() {
    const modal = document.getElementById('cardRecreateModal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
}

function submitCardRecreateRequest(cardId) {
    const newExpiryDateSelect = document.getElementById('newExpiryDate');
    const newExpiryDate = newExpiryDateSelect.value;

    if (!newExpiryDate) {
        showCustomNotification('‚ùå –û—à–∏–±–∫–∞', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã', 'error');
        return;
    }

    showCustomConfirm(
        'üîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã',
        `–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å –Ω–æ–≤—ã–º —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è ${newExpiryDate}?`,
        '–î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å',
        '–û—Ç–º–µ–Ω–∞',
        () => {
            fetch(`/cards/${cardId}/request-recreate`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: `newExpiryDate=${encodeURIComponent(newExpiryDate)}`
            })
            .then(response => response.text())
            .then(message => {
                closeCardRecreateModal(); // Close modal first
                setTimeout(() => {
                    showCustomNotification('‚úÖ –£—Å–ø–µ—Ö', message, 'success');
                }, 100);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                const button = document.querySelector(`.recreate-card-btn[data-card-id="${cardId}"]`);
                if (button) {
                    button.textContent = 'üì§ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω';
                    button.disabled = true;
                    button.classList.remove('btn-warning');
                    button.classList.add('btn-secondary');
                }
            })
            .catch(error => {
                console.error('Card recreate request error:', error);
                showCustomNotification('‚ùå –û—à–∏–±–∫–∞', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞', 'error');
            });
        }
    );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö)
function showCustomNotification(title, message, type) {
    // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    const notification = document.createElement('div');
    notification.className = `notification notification-${type} show`;
    notification.innerHTML = `
        <div class="notification-content">
            <div class="notification-icon">${type === 'success' ? '‚úÖ' : '‚ùå'}</div>
            <div class="notification-text">
                <strong>${title}</strong><br>${message}
            </div>
        </div>
    `;
    
    document.body.appendChild(notification);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            notification.remove();
        }, 300);
    }, 5000);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö)
function showCustomConfirm(title, message, confirmText, cancelText, onConfirm) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay show';
    modal.id = 'confirmModal';
    
    modal.innerHTML = `
        <div class="modal-content">
            <div class="modal-header">
                <h3>${title}</h3>
            </div>
            <div class="modal-body">
                <p>${message}</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="confirmAction()">
                    ${confirmText}
                </button>
                <button type="button" class="btn btn-secondary" onclick="closeConfirmModal()">
                    ${cancelText}
                </button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º callback
    window.confirmCallback = onConfirm;
    
    setTimeout(() => { modal.classList.add('show'); }, 10);
}

function confirmAction() {
    if (window.confirmCallback) {
        window.confirmCallback();
        window.confirmCallback = null;
    }
    closeConfirmModal();
}

function closeConfirmModal() {
    const modal = document.getElementById('confirmModal');
    if (modal) {
        modal.classList.remove('show');
        setTimeout(() => {
            modal.remove();
        }, 300);
    }
}
