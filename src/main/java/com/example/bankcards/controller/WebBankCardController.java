package com.example.bankcards.controller;

import com.example.bankcards.dto.BankCardDto;
import com.example.bankcards.dto.CreateBankCardRequest;
import com.example.bankcards.entity.BankCard;
import com.example.bankcards.entity.User;
import com.example.bankcards.service.BankCardService;
import com.example.bankcards.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import org.springframework.http.ResponseEntity;

import java.util.List;

/**
 * –í–µ–±-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏
 */
@Controller
@RequestMapping("/cards")
public class WebBankCardController {

    @Autowired
    private BankCardService bankCardService;

    @Autowired
    private UserService userService;

    /**
     * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @GetMapping
    public String myCards(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(required = false) String status,
            @RequestParam(required = false) String search,
            Authentication authentication,
            Model model) {
        
        String username = authentication.getName();
        User currentUser = userService.findByEmail(username).orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        
        BankCard.Status statusEnum = null;
        if (status != null && !status.isEmpty()) {
            try {
                statusEnum = BankCard.Status.valueOf(status.toUpperCase());
            } catch (IllegalArgumentException e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            }
        }
        
        Page<BankCardDto> cards = bankCardService.findByOwnerWithFilters(currentUser, statusEnum, search, pageable);
        
        model.addAttribute("cards", cards);
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", cards.getTotalPages());
        model.addAttribute("currentStatus", status);
        model.addAttribute("currentSearch", search);
        
        return "cards/list";
    }

    /**
     * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
     */
    @GetMapping("/create")
    public String createCardForm(Model model) {
        model.addAttribute("createRequest", new CreateBankCardRequest());
        return "cards/create";
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã
     */
    @PostMapping("/create")
    public String createCard(
            @ModelAttribute("createRequest") CreateBankCardRequest request,
            RedirectAttributes redirectAttributes) {
        
        try {
            BankCardDto card = bankCardService.createCard(request);
            redirectAttributes.addFlashAttribute("successMessage", "–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: " + card.getMaskedNumber());
            return "redirect:/cards/admin";
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã: " + e.getMessage());
            return "redirect:/cards/create";
        }
    }

    /**
     * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–µ
     */
    @GetMapping("/{id}")
    public String cardDetails(@PathVariable Long id, Authentication authentication, Model model) {
        String username = authentication.getName();
        User currentUser = userService.findByEmail(username).orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        if (!bankCardService.canUserManageCard(currentUser, id) && !currentUser.getRole().equals(User.Role.ADMIN)) {
            return "redirect:/cards?error=access_denied";
        }
        
        return bankCardService.findById(id)
                .map(card -> {
                    model.addAttribute("card", card);
                    return "cards/details";
                })
                .orElse("redirect:/cards?error=not_found");
    }

    /**
     * –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã
     */
    @PostMapping("/{id}/block")
    public ResponseEntity<?> blockCard(
            @PathVariable Long id,
            @RequestParam String reason,
            Authentication authentication) {
        
        String username = authentication.getName();
        User currentUser = userService.findByEmail(username).orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        if (!bankCardService.canUserManageCard(currentUser, id) && !currentUser.getRole().equals(User.Role.ADMIN)) {
            return ResponseEntity.status(403).body("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ä—Ç–µ");
        }
        
        try {
            bankCardService.blockCard(id, reason);
            return ResponseEntity.ok("‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞");
        } catch (Exception e) {
            System.err.println("Error blocking card " + id + ": " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: " + e.getMessage());
        }
    }

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞—Ä—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
     */
    @PostMapping("/{id}/activate")
    public ResponseEntity<?> activateCard(
            @PathVariable Long id,
            Authentication authentication) {
        
        String username = authentication.getName();
        User currentUser = userService.findByEmail(username).orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        if (!currentUser.getRole().equals(User.Role.ADMIN)) {
            return ResponseEntity.status(403).body("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        }
        
        try {
            bankCardService.activateCardSimple(id);
            return ResponseEntity.ok("‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞");
        } catch (Exception e) {
            System.err.println("Error activating card " + id + ": " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: " + e.getMessage());
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
     */
    @PostMapping("/{id}/delete")
    public ResponseEntity<?> deleteCard(
            @PathVariable Long id,
            Authentication authentication) {
        
        String username = authentication.getName();
        User currentUser = userService.findByEmail(username).orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        if (!currentUser.getRole().equals(User.Role.ADMIN)) {
            return ResponseEntity.status(403).body("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        }
        
        try {
            bankCardService.deleteCard(id);
            return ResponseEntity.ok("üóëÔ∏è –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");
        } catch (Exception e) {
            System.err.println("Error deleting card " + id + ": " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + e.getMessage());
        }
    }

    /**
     * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
     */
    @GetMapping("/admin")
    public String allCards(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(required = false) String status,
            @RequestParam(required = false) String search,
            Authentication authentication,
            Model model) {
        
        String username = authentication.getName();
        User currentUser = userService.findByEmail(username).orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        if (!currentUser.getRole().equals(User.Role.ADMIN)) {
            return "redirect:/cards?error=access_denied";
        }
        
        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        
        BankCard.Status statusEnum = null;
        if (status != null && !status.isEmpty()) {
            try {
                statusEnum = BankCard.Status.valueOf(status.toUpperCase());
            } catch (IllegalArgumentException e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            }
        }
        
        Page<BankCardDto> cards = bankCardService.findAllWithFilters(statusEnum, search, pageable);
        
        model.addAttribute("cards", cards);
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", cards.getTotalPages());
        model.addAttribute("currentStatus", status);
        model.addAttribute("currentSearch", search);
        model.addAttribute("isAdmin", true);
        
        return "cards/admin";
    }

    /**
     * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã
     */
    @GetMapping("/{id}/topup")
    public String topupCardForm(@PathVariable Long id, Authentication authentication, Model model) {
        String username = authentication.getName();
        User currentUser = userService.findByEmail(username).orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        if (!bankCardService.canUserManageCard(currentUser, id) && !currentUser.getRole().equals(User.Role.ADMIN)) {
            return "redirect:/cards?error=access_denied";
        }
        
        return bankCardService.findById(id)
                .map(card -> {
                    model.addAttribute("card", card);
                    return "cards/topup";
                })
                .orElse("redirect:/cards?error=not_found");
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã (AJAX)
     */
    @PostMapping("/{id}/topup")
    public ResponseEntity<?> topupCard(
            @PathVariable Long id,
            @RequestParam Double amount,
            Authentication authentication) {
        
        String username = authentication.getName();
        User currentUser = userService.findByEmail(username).orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        if (!bankCardService.canUserManageCard(currentUser, id) && !currentUser.getRole().equals(User.Role.ADMIN)) {
            return ResponseEntity.status(403).body("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ä—Ç–µ");
        }
        
        try {
            bankCardService.topupCard(id, amount);
            return ResponseEntity.ok("–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ " + amount + " ‚ÇΩ");
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏: " + e.getMessage());
        }
    }
}
