package com.example.bankcards.controller;

import com.example.bankcards.dto.BankCardDto;
import com.example.bankcards.dto.CreateBankCardRequest;
import com.example.bankcards.entity.BankCard;
import com.example.bankcards.entity.User;
import com.example.bankcards.service.BankCardService;
import com.example.bankcards.service.UserService;
import com.example.bankcards.service.NotificationService;
import com.example.bankcards.repository.BankCardRepository;
import com.example.bankcards.entity.Notification;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;

import java.util.List;

/**
 * –í–µ–±-–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏
 */
@Controller
@RequestMapping("/cards")
public class WebBankCardController {

    @Autowired
    private BankCardService bankCardService;

    @Autowired
    private UserService userService;
    
    @Autowired
    private NotificationService notificationService;
    
    @Autowired
    private BankCardRepository bankCardRepository;

    /**
     * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–∞—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
     */
    @GetMapping
    @PreAuthorize("hasRole('USER')")
    public String myCards(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(required = false) String status,
            @RequestParam(required = false) String search,
            Authentication authentication,
            Model model) {
        
        String username = authentication.getName();
        User currentUser = userService.findByEmail(username).orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        
        BankCard.Status statusEnum = null;
        if (status != null && !status.isEmpty()) {
            try {
                statusEnum = BankCard.Status.valueOf(status.toUpperCase());
            } catch (IllegalArgumentException e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            }
        }
        
        Page<BankCardDto> cards = bankCardService.findByOwnerWithFilters(currentUser, statusEnum, search, pageable);
        
        model.addAttribute("cards", cards);
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", cards.getTotalPages());
        model.addAttribute("currentStatus", status);
        model.addAttribute("currentSearch", search);
        model.addAttribute("isAdmin", currentUser.getRole() == User.Role.ADMIN);
        
        return "cards/list";
    }

    /**
     * –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
     */
    @GetMapping("/create")
    @PreAuthorize("hasRole('ADMIN')")
    public String createCardForm(Model model) {
        model.addAttribute("createRequest", new CreateBankCardRequest());
        return "cards/create";
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
     */
    @PostMapping("/create")
    @PreAuthorize("hasRole('ADMIN')")
    public String createCard(
            @Valid @ModelAttribute("createRequest") CreateBankCardRequest request,
            BindingResult bindingResult,
            RedirectAttributes redirectAttributes,
            Model model) {
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if (bindingResult.hasErrors()) {
            model.addAttribute("createRequest", request);
            return "cards/create";
        }
        
        try {
            BankCardDto card = bankCardService.createCard(request);
            redirectAttributes.addFlashAttribute("successMessage", "–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞: " + card.getMaskedNumber());
            return "redirect:/cards/admin";
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("errorMessage", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ä—Ç—ã: " + e.getMessage());
            return "redirect:/cards/create";
        }
    }

    /**
     * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞—Ä—Ç–µ
     */
    @GetMapping("/{id}")
    public String cardDetails(@PathVariable Long id, Authentication authentication, Model model) {
        String username = authentication.getName();
        User currentUser = userService.findByEmail(username).orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        if (!bankCardService.canUserManageCard(currentUser, id) && !currentUser.getRole().equals(User.Role.ADMIN)) {
            return "redirect:/cards?error=access_denied";
        }
        
        return bankCardService.findById(id)
                .map(card -> {
                    model.addAttribute("card", card);
                    return "cards/details";
                })
                .orElse("redirect:/cards?error=not_found");
    }

    /**
     * –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
     */
    @PostMapping("/{id}/block")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> blockCard(
            @PathVariable Long id,
            @RequestParam String reason,
            Authentication authentication) {
        
        String username = authentication.getName();
        User currentUser = userService.findByEmail(username).orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        if (!bankCardService.canUserManageCard(currentUser, id) && !currentUser.getRole().equals(User.Role.ADMIN)) {
            return ResponseEntity.status(403).body("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ä—Ç–µ");
        }
        
        try {
            bankCardService.blockCard(id, reason);
            return ResponseEntity.ok("‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞");
        } catch (Exception e) {
            System.err.println("Error blocking card " + id + ": " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: " + e.getMessage());
        }
    }

    /**
     * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–∞—Ä—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
     */
    @PostMapping("/{id}/activate")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> activateCard(
            @PathVariable Long id,
            Authentication authentication) {
        
        String username = authentication.getName();
        User currentUser = userService.findByEmail(username).orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        if (!currentUser.getRole().equals(User.Role.ADMIN)) {
            return ResponseEntity.status(403).body("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        }
        
        try {
            bankCardService.activateCardSimple(id);
            return ResponseEntity.ok("‚úÖ –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞");
        } catch (Exception e) {
            System.err.println("Error activating card " + id + ": " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: " + e.getMessage());
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
     */
    @PostMapping("/{id}/delete")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> deleteCard(
            @PathVariable Long id,
            Authentication authentication) {
        
        String username = authentication.getName();
        User currentUser = userService.findByEmail(username).orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        if (!currentUser.getRole().equals(User.Role.ADMIN)) {
            return ResponseEntity.status(403).body("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤");
        }
        
        try {
            bankCardService.deleteCard(id);
            return ResponseEntity.ok("üóëÔ∏è –ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");
        } catch (Exception e) {
            System.err.println("Error deleting card " + id + ": " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + e.getMessage());
        }
    }

    /**
     * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
     */
    @GetMapping("/admin")
    @PreAuthorize("hasRole('ADMIN')")
    public String allCards(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "20") int size,
            @RequestParam(required = false) String status,
            @RequestParam(required = false) String search,
            Authentication authentication,
            Model model) {
        
        String username = authentication.getName();
        User currentUser = userService.findByEmail(username).orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        if (!currentUser.getRole().equals(User.Role.ADMIN)) {
            return "redirect:/cards?error=access_denied";
        }
        
        Pageable pageable = PageRequest.of(page, size, Sort.by("createdAt").descending());
        
        BankCard.Status statusEnum = null;
        if (status != null && !status.isEmpty()) {
            try {
                statusEnum = BankCard.Status.valueOf(status.toUpperCase());
            } catch (IllegalArgumentException e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            }
        }
        
        Page<BankCardDto> cards = bankCardService.findAllWithFilters(statusEnum, search, pageable);
        
        model.addAttribute("cards", cards);
        model.addAttribute("currentPage", page);
        model.addAttribute("totalPages", cards.getTotalPages());
        model.addAttribute("currentStatus", status);
        model.addAttribute("currentSearch", search);
        model.addAttribute("isAdmin", true);
        
        return "cards/admin";
    }

    /**
     * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
     */
    @GetMapping("/{id}/topup")
    @PreAuthorize("hasRole('ADMIN')")
    public String topupCardForm(@PathVariable Long id, Authentication authentication, Model model) {
        String username = authentication.getName();
        User currentUser = userService.findByEmail(username).orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        if (!bankCardService.canUserManageCard(currentUser, id) && !currentUser.getRole().equals(User.Role.ADMIN)) {
            return "redirect:/cards?error=access_denied";
        }
        
        return bankCardService.findById(id)
                .map(card -> {
                    model.addAttribute("card", card);
                    return "cards/topup";
                })
                .orElse("redirect:/cards?error=not_found");
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç—ã (AJAX) (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
     */
    @PostMapping("/{id}/topup")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<?> topupCard(
            @PathVariable Long id,
            @RequestParam Double amount,
            Authentication authentication) {
        
        String username = authentication.getName();
        User currentUser = userService.findByEmail(username).orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        if (!bankCardService.canUserManageCard(currentUser, id) && !currentUser.getRole().equals(User.Role.ADMIN)) {
            return ResponseEntity.status(403).body("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ä—Ç–µ");
        }
        
        try {
            bankCardService.topupCard(id, amount);
            return ResponseEntity.ok("–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ " + amount + " ‚ÇΩ");
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏: " + e.getMessage());
        }
    }
    
    /**
     * –ó–∞–ø—Ä–æ—Å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–∞—Ä—Ç—ã (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
     */
    @PostMapping("/{id}/request-block")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<?> requestCardBlock(
            @PathVariable Long id,
            @RequestParam String reason,
            Authentication authentication) {
        
        String username = authentication.getName();
        User currentUser = userService.findByEmail(username)
            .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ–π –∫–∞—Ä—Ç–æ–π
            if (!bankCardService.canUserManageCard(currentUser, id)) {
                return ResponseEntity.status(403).body("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ä—Ç–µ");
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            BankCardDto cardDto = bankCardService.findById(id)
                .orElseThrow(() -> new RuntimeException("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            BankCard card = bankCardService.getCardEntityById(id)
                .orElseThrow(() -> new RuntimeException("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));
            
            // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            notificationService.createCardBlockRequest(currentUser, card, reason);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            card.setBlockRequestSent(true);
            bankCardService.saveCard(card);
            
            return ResponseEntity.ok("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–∞—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º");
            
        } catch (Exception e) {
            System.err.println("Error requesting card block: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage());
        }
    }
    
    /**
     * –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
     */
    @PostMapping("/{id}/request-topup")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<?> requestCardTopup(
            @PathVariable Long id,
            @RequestParam Double amount,
            Authentication authentication) {
        
        String username = authentication.getName();
        User currentUser = userService.findByEmail(username)
            .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ–π –∫–∞—Ä—Ç–æ–π
            if (!bankCardService.canUserManageCard(currentUser, id)) {
                return ResponseEntity.status(403).body("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ä—Ç–µ");
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            BankCardDto cardDto = bankCardService.findById(id)
                .orElseThrow(() -> new RuntimeException("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
            if (cardDto.getStatus() == BankCard.Status.BLOCKED) {
                return ResponseEntity.badRequest().body("‚ùå –ö–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ");
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if (cardDto.getBlockRequestSent() != null && cardDto.getBlockRequestSent()) {
                return ResponseEntity.badRequest().body("‚ùå –ü–æ –∫–∞—Ä—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ");
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            BankCard card = bankCardService.getCardEntityById(id)
                .orElseThrow(() -> new RuntimeException("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));
            
            // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            notificationService.createCardTopupRequest(currentUser, card, amount);
            
            return ResponseEntity.ok("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º");
            
        } catch (Exception e) {
            System.err.println("Error requesting card topup: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage());
        }
    }
    
    /**
     * –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–∞—Ä—Ç—ã (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
     */
    @PostMapping("/{id}/request-unblock")
    @PreAuthorize("hasAnyRole('USER', 'ADMIN')")
    public ResponseEntity<?> requestCardUnblock(
            @PathVariable Long id,
            @RequestParam String reason,
            Authentication authentication) {
        
        String username = authentication.getName();
        User currentUser = userService.findByEmail(username)
            .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —ç—Ç–æ–π –∫–∞—Ä—Ç–æ–π
            if (!bankCardService.canUserManageCard(currentUser, id)) {
                return ResponseEntity.status(403).body("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ä—Ç–µ");
            }
            
            // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            BankCardDto cardDto = bankCardService.findById(id)
                .orElseThrow(() -> new RuntimeException("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
            if (cardDto.getStatus() != BankCard.Status.BLOCKED) {
                return ResponseEntity.badRequest().body("‚ùå –ö–∞—Ä—Ç–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");
            }
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å –∫–∞—Ä—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            BankCard card = bankCardService.getCardEntityById(id)
                .orElseThrow(() -> new RuntimeException("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));
            
            // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
            notificationService.createCardUnblockRequest(currentUser, card, reason);
            
            return ResponseEntity.ok("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–∞—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º");
            
        } catch (Exception e) {
            System.err.println("Error requesting card unblock: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage());
        }
    }
    
    /**
     * –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
     */
    @PostMapping("/request-create")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<?> requestCardCreate(
            @RequestParam String expiryDate,
            Authentication authentication) {

        String username = authentication.getName();
        User currentUser = userService.findByEmail(username)
            .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        try {
            notificationService.createCardCreateRequest(currentUser, expiryDate);
            return ResponseEntity.ok("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º");

        } catch (Exception e) {
            System.err.println("Error requesting card creation: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage());
        }
    }
    
    @PostMapping("/{cardId}/request-recreate")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<?> requestCardRecreate(
            @PathVariable Long cardId,
            @RequestParam String newExpiryDate,
            Authentication authentication) {

        String username = authentication.getName();
        User currentUser = userService.findByEmail(username)
            .orElseThrow(() -> new RuntimeException("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"));

        try {
            System.out.println("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã: cardId=" + cardId + ", newExpiryDate=" + newExpiryDate + ", user=" + currentUser.getEmail());
            
            // –ù–∞–π—Ç–∏ –∫–∞—Ä—Ç—É –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –æ–Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            BankCard card = bankCardRepository.findById(cardId)
                .orElseThrow(() -> new RuntimeException("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"));
                
            System.out.println("üîç –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ä—Ç–∞: " + card.getMaskedNumber() + ", —Å—Ç–∞—Ç—É—Å: " + card.getStatus() + ", –∏—Å—Ç–µ–∫–ª–∞: " + card.isExpired());
                
            if (!card.getOwner().getId().equals(currentUser.getId())) {
                return ResponseEntity.status(403).body("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–∞—Ä—Ç–µ");
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∫–∞—Ä—Ç–∞ –∏—Å—Ç–µ–∫–ª–∞
            if (!card.isExpired()) {
                return ResponseEntity.badRequest().body("‚ùå –ö–∞—Ä—Ç–∞ –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫–ª–∞");
            }

            Notification notification = notificationService.createCardRecreateRequest(currentUser, card, newExpiryDate);
            System.out.println("‚úÖ –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: id=" + notification.getId() + ", —Ç–∏–ø=" + notification.getType());
            
            return ResponseEntity.ok("‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º");

        } catch (Exception e) {
            System.err.println("Error requesting card recreation: " + e.getMessage());
            e.printStackTrace();
            return ResponseEntity.badRequest().body("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage());
        }
    }
}
