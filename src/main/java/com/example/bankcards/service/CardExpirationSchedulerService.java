package com.example.bankcards.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞—Ä—Ç
 */
@Service
public class CardExpirationSchedulerService {

    private static final Logger logger = LoggerFactory.getLogger(CardExpirationSchedulerService.class);
    private static final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");

    @Autowired
    private BankCardService bankCardService;

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞—Ä—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:01
     * Cron: —Å–µ–∫—É–Ω–¥—ã –º–∏–Ω—É—Ç—ã —á–∞—Å—ã –¥–µ–Ω—å –º–µ—Å—è—Ü –¥–µ–Ω—å_–Ω–µ–¥–µ–ª–∏
     */
    @Scheduled(cron = "0 1 0 * * ?")
    public void checkAndUpdateExpiredCards() {
        String currentTime = LocalDateTime.now().format(formatter);
        logger.info("üïê –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞—Ä—Ç: {}", currentTime);
        
        try {
            int updatedCount = bankCardService.updateExpiredCards();
            
            if (updatedCount > 0) {
                logger.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {} –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞—Ä—Ç –Ω–∞ —Å—Ç–∞—Ç—É—Å EXPIRED", updatedCount);
            } else {
                logger.info("‚ÑπÔ∏è –ò—Å—Ç–µ–∫—à–∏—Ö –∫–∞—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            }
            
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞—Ä—Ç: {}", e.getMessage(), e);
        }
        
        logger.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞—Ä—Ç: {}", LocalDateTime.now().format(formatter));
    }

    /**
     * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ (–¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
     * Cron: –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤ (–≤ 00:05, 06:05, 12:05, 18:05)
     */
    @Scheduled(cron = "0 5 */6 * * ?")
    public void checkExpiredCardsFrequently() {
        String currentTime = LocalDateTime.now().format(formatter);
        logger.debug("üîç –ß–∞—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞—Ä—Ç: {}", currentTime);
        
        try {
            int updatedCount = bankCardService.updateExpiredCards();
            
            if (updatedCount > 0) {
                logger.warn("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {} –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞—Ä—Ç –ø—Ä–∏ —á–∞—Å—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ! –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –Ω–∞ EXPIRED", updatedCount);
            } else {
                logger.debug("‚úì –ß–∞—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            }
            
        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á–∞—Å—Ç–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–∞—Ä—Ç: {}", e.getMessage(), e);
        }
    }

    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
     * –ú–æ–∂–Ω–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ, —É–±—Ä–∞–≤ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é @Scheduled
     */
    // @Scheduled(fixedRate = 30000) // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (–æ—Ç–∫–ª—é—á–µ–Ω–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    public void testScheduler() {
        logger.debug("üß™ –¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {}", LocalDateTime.now().format(formatter));
    }
}

